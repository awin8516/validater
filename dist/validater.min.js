/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
const _$ = __webpack_require__(6);
(function () {
	window.validater = function (selecter, setting) {
		"use strict";

		var that = this;
		this.tipsList = [];
		//全局设置
		this.setting = _$.extend({
			tips: true, //是否弹出提示气泡
			position: 'right', //提示气泡位置
			translate: [0, 0], //x,y偏移量
			addclass: '', //提示气泡增加类名
			btnSubmit: '.valid-submit', //表单提交按钮
			async: false, //是否异步验证
			onInit: null, //初始化后回调
			onSuccess: null, //表单全部验证通过回调
			onError: null, //表单验证未通过回调
			onVerifyEnd: null //单项验证后回调
		}, setting);

		//单个默认设置，可在每项中单独配置
		/*****************************************************************************
  <input type="text" valid-option="{
            type:'n>0',
            null:'请输入！',
            error:'输入有误！'
  }">
  ******************************************************************************/
		this.option = _$.extend({
			type: null, //验证规则 支持正则  @String
			tips: that.setting.tips, //是否弹出提示气泡 @Boolean
			target: '', //提示泡定位依据 默认是追加在<input>之后； @String id or className | #password | .password | parent | prev | next
			position: that.setting.position, //提示气泡位置
			translate: that.setting.translate, //[x,y]偏移量 @Array  [10,10]
			addclass: that.setting.addclass, //提示气泡增加类名			
			pass: '输入正确！', //@String
			null: '不能为空！', //@String
			error: '输入错误！', //@String
			errorSame: '两次密码输入不一致！', //@String for same
			same: '', // @String id or className | #password .password
			errorLess: '输入值须小于最大数！', //@String  for less
			less: '', // @String id or className | #more .more
			errorMore: '输入值须大于最小数！', //@String for more
			more: '' // @String id or className | #less .less
		});

		//规则模板，可自行追加
		this.regExp = {
			"*": /[\w\W]+/,
			"*6-18": /^[\w\W]{6,18}$/,
			"zh": /^[\u0391-\uFFE5]+$/,
			"price": /^(0|[1-9][0-9]{0,9})(\.[0-9]{1,2})?$/,
			"float": /^(-?\d+)(\.\d+)?$/,
			"n": /^\d+$/,
			"n>0": /^[0-9]*[1-9][0-9]*$/,
			"n<0": /^-[0-9]*[1-9][0-9]*$/,
			"n<=0": /^((-\d+)|(0+))$/,
			"n6-16": /^\d{6,16}$/,
			"s": /^[\u4E00-\u9FA5\uf900-\ufa2d\w\.\s]+$/,
			"s6-18": /^[\u4E00-\u9FA5\uf900-\ufa2d\w\.\s]{6,18}$/,
			"post": /^[0-9]{6}$/,
			"mobile": /^1[3|4|5|8]\d{9}$/,
			"email": /^\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$/,
			"url": /^(\w+:\/\/)?\w+(\.\w+)+.*$/,
			"password": /^\w+$/
		};

		this.events = {
			text: 'focusout',
			password: 'focusout',
			search: 'focusout',
			tel: 'focusout',
			select: 'change',
			checkbox: 'change',
			radio: 'change',
			textarea: 'focusout',
			hidden: 'change' //隐藏域需要前台改变值时调用$('#a').val(1).change()
		};

		this.createTips = function (input, target, option, valided) {
			target = target || input;
			var _next = _$.next(target, '.validater-tips');
			if (_next) {
				_$.remove(_next);
				_$.delArray(_next, that.tipsList);
			};
			var tips = _$.elem('<div class="validater-tips validater-tips-' + valided + ' validater-tips-' + option.position + ' ' + option.addclass + '">' + '<div class="validater-tips-bg">' + '<span class="validater-tips-info">' + option[valided] + '</span>' + '<s class="validater-tips-arrow"></s>' + '<s class="validater-tips-arrow-border"></s>' + '</div>' + '</div>');
			_$.after(tips, target);
			_$.addClass('validater-relative', target);
			var inputpos = {
				left: target.offsetLeft + (parseFloat(target.style.marginLeft) || 0),
				top: target.offsetTop + (parseFloat(target.style.marginTop) || 0)
			};
			_$.removeClass('validater-relative', target);
			var tipsSize = {
				width: tips.clientWidth || tips.offsetWidth,
				height: tips.clientHeight || tips.offsetHeight
			};
			var targetSize = {
				width: target.clientWidth || target.offsetWidth,
				height: target.clientHeight || target.offsetHeight
			};
			var pos = {};
			switch (option.position) {
				case 'left':
					pos.left = inputpos.left - tipsSize.width;
					pos.top = inputpos.top - (tipsSize.height - targetSize.height) * .5;
					break;
				case 'right':
					pos.left = inputpos.left + targetSize.width;
					pos.top = inputpos.top - (tipsSize.height - targetSize.height) * .5;
					break;
				case 'top':
					pos.left = inputpos.left;
					pos.top = inputpos.top - tipsSize.height;
					break;
				case 'bottom':
					pos.left = inputpos.left;
					pos.top = inputpos.top + targetSize.height;
					break;
				default:
					pos.left = inputpos.left + targetSize.width;
					pos.top = inputpos.top - (tipsSize.height - targetSize.height) * .5;
					break;
			};
			pos.left += option.translate[0];
			pos.top += option.translate[1];
			that.showTips(tips, pos);
		};

		this.showTips = function (tips, pos) {
			_$.css(tips, {
				left: pos.left + 'px',
				top: pos.top + 'px'
			});
			_$.addClass('validater-tips-show', tips);
			that.tipsList.push(tips);
		};
		this.hideTips = function (tips) {
			_$.removeClass('validater-tips-show', tips);
			setTimeout(function () {
				_$.remove(tips);
				_$.delArray(tips, that.tipsList);
			}, 300);
		};

		this.getType = function (input) {
			return input.getAttribute('type') || input.tagName.toLowerCase();
		};

		this.getOption = function (input) {
			var option = _$.extend(that.option, JSON.parse(_$.formatJSON(input.getAttribute('valid-option'))));
			if (typeof option.translate === 'string') option.translate = JSON.parse(option.translate);
			if (typeof option.tips === 'string') option.tips = JSON.parse(option.tips);
			return option;
		};

		this.getTarget = function (input, target) {
			if (target) {
				if (target.indexOf('#') != -1 || target.indexOf('.') != -1) {
					//id or class
					target = _$.getElement(target);
				} else if (target == 'parent') {
					target = input.parentNode;
				} else if (target == 'prev') {
					target = _$.hasClass('validater-tips', _$.prev(input)) ? _$.prev(_$.prev(input)) : _$.prev(input);
				} else if (target == 'next') {
					target = _$.hasClass('validater-tips', _$.next(input)) ? _$.next(_$.next(input)) : _$.next(input);
				}
			} else {
				target = input;
			};
			return target || input;
		};

		this.valid = function (input, option) {
			var types,
			    resp,
			    types = /^\/.*\/$/.test(option.type) ? [option.type] : option.type.split('|'),
			    value = input.value,
			    same = _$.getElement(option.same, that.self).value,
			    less = parseInt(_$.getElement(option.less, that.self).value),
			    more = parseInt(_$.getElement(option.more, that.self).value);
			types.forEach(function (n, i) {
				var reg = /^\/.*\/$/.test(n) ? new RegExp(eval(n)) : new RegExp(that.regExp[n]);
				resp = value == '' ? 'null' : !reg.exec(_$.trim(value)) ? 'error' : same && value != same ? 'errorSame' : less && value >= less ? 'errorLess' : more && value <= more ? 'errorMore' : 'pass';
				if (resp == 'pass') return false;
			});
			return resp;
		};

		this.verify = function (input, option, verifyForm) {
			option = _$.extend(that.getOption(input), option);
			var target = that.getTarget(input, option.target);
			var valided = that.valid(input, option);
			var response = { status: true, valided: valided, target: target, option };
			if (valided == 'pass') {
				var tipsbox = _$.next(target, '.validater-tips');
				tipsbox && that.hideTips(tipsbox);
			} else {
				that.setting.tips && option.tips && that.createTips(input, target, option, valided);
				response.status = false;
			};
			!verifyForm && that.setting.onVerifyEnd && that.setting.onVerifyEnd({ el: that.self, items: [{
					obj: input,
					target: target,
					type: valided,
					tips: option[valided]
				}] });
			return response;
		};

		this.verifyForm = function () {
			var status = true;
			var response = { el: that.self, items: [] };
			that.inputs.forEach(function (input) {
				var _check = that.verify(input, null, true);
				if (!_check.status) {
					status = false;
					response.items.push({
						obj: input,
						target: _check.target,
						type: _check.valided,
						tips: _check.option[_check.valided]
					});
					if (!that.setting.async) return false;
				}
			});
			if (status) {
				that.setting.onSuccess && that.setting.onSuccess(response);
			} else {
				that.setting.onError && that.setting.onError(response);
			};
		};

		this.init = function () {
			that.self = _$.getElement(selecter);
			that.inputs = _$.getElement('[valid-option]', that.self);
			that.submit = _$.getElement(that.setting.btnSubmit, that.self);
			that.inputs.forEach(function (input) {
				var ev = that.events[that.getType(input)];
				_$.removeEvent(input, ev + '.verify');
				_$.addEvent(input, ev + '.verify', function () {
					that.verify(input);
				});
			});
			_$.removeEvent(that.submit, 'click.verifyForm');
			_$.addEvent(that.submit, 'click.verifyForm', that.verifyForm);
		};

		this.reInit = function () {
			that.init();
		};

		this.clear = function () {
			_$.remove(that.tipsList);
			that.tipsList = [];
		};

		this.append = function (input) {
			if (input.getAttribute('valid-option-bak')) {
				input.setAttribute('valid-option', input.getAttribute('valid-option-bak'));
				input.removeAttribute('valid-option-bak');
			};
			that.inputs = _$.getElement('[valid-option]', that.self);
			var ev = that.events[that.getType(input)];
			_$.removeEvent(input, ev + '.verify');
			_$.addEvent(input, ev + '.verify', function () {
				that.verify(input);
			});
		};

		this.remove = function (input) {
			_$.delArray(input, that.inputs);
			var ev = that.events[that.getType(input)];
			_$.removeEvent(input, ev + '.verify');
			input.setAttribute('valid-option-bak', input.getAttribute('valid-option'));
			input.removeAttribute('valid-option');
		};

		this.destroy = function () {
			that.inputs.forEach(function (input) {
				var ev = that.events[that.getType(input)];
				_$.removeEvent(input, ev + '.verify');
			});
			_$.removeEvent(that.submit, 'click.verifyForm');
		};
		this.init();

		setting.onInit && setting.onInit(this);

		return this;
	};
})();

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(2);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {"hmr":true}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(4)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../node_modules/css-loader/index.js!./style.css", function() {
			var newContent = require("!!../node_modules/css-loader/index.js!./style.css");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(3)(undefined);
// imports


// module
exports.push([module.i, ".validater-tips{font-size:12px;border:1px solid #000;border-radius:3px;box-shadow:0 0 0 1px hsla(0,0%,100%,.15);position:absolute;opacity:0;transition:opacity .3s;z-index:10}.validater-tips-bg{background-color:#ee4300;background-image:none;background-repeat:no-repeat;border-radius:2px;color:#fff;height:30px;line-height:30px;padding:0 10px;white-space:nowrap}.validater-tips.validater-tips-show{display:block;opacity:1;animation:validater-animation-right .3s;-webkit-animation:validater-animation-right .3s}@keyframes validater-animation-right{0%{transform:translate(0)}10%{transform:translate(-5px)}30%{transform:translate(5px)}50%{transform:translate(-5px)}70%{transform:translate(5px)}90%{transform:translate(-5px)}to{transform:translate(0)}}@-webkit-keyframes validater-animation-right{0%{-webkit-transform:translate(0)}10%{-webkit-transform:translate(-5px)}30%{-webkit-transform:translate(5px)}50%{-webkit-transform:translate(-5px)}70%{-webkit-transform:translate(5px)}90%{-webkit-transform:translate(-5px)}to{-webkit-transform:translate(0)}}.validater-relative{position:relative}.validater-tips-null.validater-tips{border:1px solid #ee4300}.validater-tips-null .validater-tips-bg{background-color:#ee4300;color:#fff}.validater-tips-null .validater-tips-arrow,.validater-tips-null .validater-tips-arrow-border{border-color:#ee4300}.validater-tips-diff.validater-tips,.validater-tips-error.validater-tips{border:1px solid #f03}.validater-tips-diff .validater-tips-bg,.validater-tips-error .validater-tips-bg{background-color:#f03;color:#fff}.validater-tips-diff .validater-tips-arrow,.validater-tips-diff .validater-tips-arrow-border,.validater-tips-error .validater-tips-arrow,.validater-tips-error .validater-tips-arrow-border{border-color:#f03}.validater-tips-pass.validater-tips{border:1px solid #390}.validater-tips-pass .validater-tips-bg{background-color:#390;color:#fff}.validater-tips-pass .validater-tips-arrow,.validater-tips-pass .validater-tips-arrow-border{border-color:#390}.validater-tips-arrow{border-width:4px;z-index:5}.validater-tips-arrow,.validater-tips-arrow-border{border-style:solid;display:inline-block;position:absolute}.validater-tips-arrow-border{border-width:5px}.validater-tips-left{margin-left:-10px}.validater-tips-left .validater-tips-arrow{margin-top:-4px;right:-8px}.validater-tips-left .validater-tips-arrow,.validater-tips-left .validater-tips-arrow-border{border-right-color:transparent;border-top-color:transparent;border-bottom-color:transparent;top:50%}.validater-tips-left .validater-tips-arrow-border{margin-top:-5px;right:-10px}.validater-tips-right{margin-left:10px}.validater-tips-right .validater-tips-arrow{margin-top:-4px;left:-8px}.validater-tips-right .validater-tips-arrow,.validater-tips-right .validater-tips-arrow-border{border-left-color:transparent;border-top-color:transparent;border-bottom-color:transparent;top:50%}.validater-tips-right .validater-tips-arrow-border{margin-top:-5px;left:-10px}.validater-tips-top{margin-top:-10px}.validater-tips-top .validater-tips-arrow{margin-left:-4px;bottom:-8px}.validater-tips-top .validater-tips-arrow,.validater-tips-top .validater-tips-arrow-border{border-bottom-color:transparent;border-left-color:transparent;border-right-color:transparent;left:50%}.validater-tips-top .validater-tips-arrow-border{margin-left:-5px;bottom:-10px}.validater-tips-bottom{margin-top:10px}.validater-tips-bottom .validater-tips-arrow{margin-left:-4px;top:-8px}.validater-tips-bottom .validater-tips-arrow,.validater-tips-bottom .validater-tips-arrow-border{border-top-color:transparent;border-left-color:transparent;border-right-color:transparent;left:50%}.validater-tips-bottom .validater-tips-arrow-border{margin-left:-5px;top:-10px}", ""]);

// exports


/***/ }),
/* 3 */
/***/ (function(module, exports) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
// css base code, injected by the css-loader
module.exports = function(useSourceMap) {
	var list = [];

	// return the list of modules as css string
	list.toString = function toString() {
		return this.map(function (item) {
			var content = cssWithMappingToString(item, useSourceMap);
			if(item[2]) {
				return "@media " + item[2] + "{" + content + "}";
			} else {
				return content;
			}
		}).join("");
	};

	// import a list of modules into the list
	list.i = function(modules, mediaQuery) {
		if(typeof modules === "string")
			modules = [[null, modules, ""]];
		var alreadyImportedModules = {};
		for(var i = 0; i < this.length; i++) {
			var id = this[i][0];
			if(typeof id === "number")
				alreadyImportedModules[id] = true;
		}
		for(i = 0; i < modules.length; i++) {
			var item = modules[i];
			// skip already imported module
			// this implementation is not 100% perfect for weird media query combinations
			//  when a module is imported multiple times with different media queries.
			//  I hope this will never occur (Hey this way we have smaller bundles)
			if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
				if(mediaQuery && !item[2]) {
					item[2] = mediaQuery;
				} else if(mediaQuery) {
					item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
				}
				list.push(item);
			}
		}
	};
	return list;
};

function cssWithMappingToString(item, useSourceMap) {
	var content = item[1] || '';
	var cssMapping = item[3];
	if (!cssMapping) {
		return content;
	}

	if (useSourceMap && typeof btoa === 'function') {
		var sourceMapping = toComment(cssMapping);
		var sourceURLs = cssMapping.sources.map(function (source) {
			return '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */'
		});

		return [content].concat(sourceURLs).concat([sourceMapping]).join('\n');
	}

	return [content].join('\n');
}

// Adapted from convert-source-map (MIT)
function toComment(sourceMap) {
	// eslint-disable-next-line no-undef
	var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));
	var data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;

	return '/*# ' + data + ' */';
}


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

var stylesInDom = {};

var	memoize = function (fn) {
	var memo;

	return function () {
		if (typeof memo === "undefined") memo = fn.apply(this, arguments);
		return memo;
	};
};

var isOldIE = memoize(function () {
	// Test for IE <= 9 as proposed by Browserhacks
	// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805
	// Tests for existence of standard globals is to allow style-loader
	// to operate correctly into non-standard environments
	// @see https://github.com/webpack-contrib/style-loader/issues/177
	return window && document && document.all && !window.atob;
});

var getElement = (function (fn) {
	var memo = {};

	return function(selector) {
		if (typeof memo[selector] === "undefined") {
			var styleTarget = fn.call(this, selector);
			// Special case to return head of iframe instead of iframe itself
			if (styleTarget instanceof window.HTMLIFrameElement) {
				try {
					// This will throw an exception if access to iframe is blocked
					// due to cross-origin restrictions
					styleTarget = styleTarget.contentDocument.head;
				} catch(e) {
					styleTarget = null;
				}
			}
			memo[selector] = styleTarget;
		}
		return memo[selector]
	};
})(function (target) {
	return document.querySelector(target)
});

var singleton = null;
var	singletonCounter = 0;
var	stylesInsertedAtTop = [];

var	fixUrls = __webpack_require__(5);

module.exports = function(list, options) {
	if (typeof DEBUG !== "undefined" && DEBUG) {
		if (typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
	}

	options = options || {};

	options.attrs = typeof options.attrs === "object" ? options.attrs : {};

	// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
	// tags it will allow on a page
	if (!options.singleton) options.singleton = isOldIE();

	// By default, add <style> tags to the <head> element
	if (!options.insertInto) options.insertInto = "head";

	// By default, add <style> tags to the bottom of the target
	if (!options.insertAt) options.insertAt = "bottom";

	var styles = listToStyles(list, options);

	addStylesToDom(styles, options);

	return function update (newList) {
		var mayRemove = [];

		for (var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];

			domStyle.refs--;
			mayRemove.push(domStyle);
		}

		if(newList) {
			var newStyles = listToStyles(newList, options);
			addStylesToDom(newStyles, options);
		}

		for (var i = 0; i < mayRemove.length; i++) {
			var domStyle = mayRemove[i];

			if(domStyle.refs === 0) {
				for (var j = 0; j < domStyle.parts.length; j++) domStyle.parts[j]();

				delete stylesInDom[domStyle.id];
			}
		}
	};
};

function addStylesToDom (styles, options) {
	for (var i = 0; i < styles.length; i++) {
		var item = styles[i];
		var domStyle = stylesInDom[item.id];

		if(domStyle) {
			domStyle.refs++;

			for(var j = 0; j < domStyle.parts.length; j++) {
				domStyle.parts[j](item.parts[j]);
			}

			for(; j < item.parts.length; j++) {
				domStyle.parts.push(addStyle(item.parts[j], options));
			}
		} else {
			var parts = [];

			for(var j = 0; j < item.parts.length; j++) {
				parts.push(addStyle(item.parts[j], options));
			}

			stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
		}
	}
}

function listToStyles (list, options) {
	var styles = [];
	var newStyles = {};

	for (var i = 0; i < list.length; i++) {
		var item = list[i];
		var id = options.base ? item[0] + options.base : item[0];
		var css = item[1];
		var media = item[2];
		var sourceMap = item[3];
		var part = {css: css, media: media, sourceMap: sourceMap};

		if(!newStyles[id]) styles.push(newStyles[id] = {id: id, parts: [part]});
		else newStyles[id].parts.push(part);
	}

	return styles;
}

function insertStyleElement (options, style) {
	var target = getElement(options.insertInto)

	if (!target) {
		throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");
	}

	var lastStyleElementInsertedAtTop = stylesInsertedAtTop[stylesInsertedAtTop.length - 1];

	if (options.insertAt === "top") {
		if (!lastStyleElementInsertedAtTop) {
			target.insertBefore(style, target.firstChild);
		} else if (lastStyleElementInsertedAtTop.nextSibling) {
			target.insertBefore(style, lastStyleElementInsertedAtTop.nextSibling);
		} else {
			target.appendChild(style);
		}
		stylesInsertedAtTop.push(style);
	} else if (options.insertAt === "bottom") {
		target.appendChild(style);
	} else if (typeof options.insertAt === "object" && options.insertAt.before) {
		var nextSibling = getElement(options.insertInto + " " + options.insertAt.before);
		target.insertBefore(style, nextSibling);
	} else {
		throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");
	}
}

function removeStyleElement (style) {
	if (style.parentNode === null) return false;
	style.parentNode.removeChild(style);

	var idx = stylesInsertedAtTop.indexOf(style);
	if(idx >= 0) {
		stylesInsertedAtTop.splice(idx, 1);
	}
}

function createStyleElement (options) {
	var style = document.createElement("style");

	options.attrs.type = "text/css";

	addAttrs(style, options.attrs);
	insertStyleElement(options, style);

	return style;
}

function createLinkElement (options) {
	var link = document.createElement("link");

	options.attrs.type = "text/css";
	options.attrs.rel = "stylesheet";

	addAttrs(link, options.attrs);
	insertStyleElement(options, link);

	return link;
}

function addAttrs (el, attrs) {
	Object.keys(attrs).forEach(function (key) {
		el.setAttribute(key, attrs[key]);
	});
}

function addStyle (obj, options) {
	var style, update, remove, result;

	// If a transform function was defined, run it on the css
	if (options.transform && obj.css) {
	    result = options.transform(obj.css);

	    if (result) {
	    	// If transform returns a value, use that instead of the original css.
	    	// This allows running runtime transformations on the css.
	    	obj.css = result;
	    } else {
	    	// If the transform function returns a falsy value, don't add this css.
	    	// This allows conditional loading of css
	    	return function() {
	    		// noop
	    	};
	    }
	}

	if (options.singleton) {
		var styleIndex = singletonCounter++;

		style = singleton || (singleton = createStyleElement(options));

		update = applyToSingletonTag.bind(null, style, styleIndex, false);
		remove = applyToSingletonTag.bind(null, style, styleIndex, true);

	} else if (
		obj.sourceMap &&
		typeof URL === "function" &&
		typeof URL.createObjectURL === "function" &&
		typeof URL.revokeObjectURL === "function" &&
		typeof Blob === "function" &&
		typeof btoa === "function"
	) {
		style = createLinkElement(options);
		update = updateLink.bind(null, style, options);
		remove = function () {
			removeStyleElement(style);

			if(style.href) URL.revokeObjectURL(style.href);
		};
	} else {
		style = createStyleElement(options);
		update = applyToTag.bind(null, style);
		remove = function () {
			removeStyleElement(style);
		};
	}

	update(obj);

	return function updateStyle (newObj) {
		if (newObj) {
			if (
				newObj.css === obj.css &&
				newObj.media === obj.media &&
				newObj.sourceMap === obj.sourceMap
			) {
				return;
			}

			update(obj = newObj);
		} else {
			remove();
		}
	};
}

var replaceText = (function () {
	var textStore = [];

	return function (index, replacement) {
		textStore[index] = replacement;

		return textStore.filter(Boolean).join('\n');
	};
})();

function applyToSingletonTag (style, index, remove, obj) {
	var css = remove ? "" : obj.css;

	if (style.styleSheet) {
		style.styleSheet.cssText = replaceText(index, css);
	} else {
		var cssNode = document.createTextNode(css);
		var childNodes = style.childNodes;

		if (childNodes[index]) style.removeChild(childNodes[index]);

		if (childNodes.length) {
			style.insertBefore(cssNode, childNodes[index]);
		} else {
			style.appendChild(cssNode);
		}
	}
}

function applyToTag (style, obj) {
	var css = obj.css;
	var media = obj.media;

	if(media) {
		style.setAttribute("media", media)
	}

	if(style.styleSheet) {
		style.styleSheet.cssText = css;
	} else {
		while(style.firstChild) {
			style.removeChild(style.firstChild);
		}

		style.appendChild(document.createTextNode(css));
	}
}

function updateLink (link, options, obj) {
	var css = obj.css;
	var sourceMap = obj.sourceMap;

	/*
		If convertToAbsoluteUrls isn't defined, but sourcemaps are enabled
		and there is no publicPath defined then lets turn convertToAbsoluteUrls
		on by default.  Otherwise default to the convertToAbsoluteUrls option
		directly
	*/
	var autoFixUrls = options.convertToAbsoluteUrls === undefined && sourceMap;

	if (options.convertToAbsoluteUrls || autoFixUrls) {
		css = fixUrls(css);
	}

	if (sourceMap) {
		// http://stackoverflow.com/a/26603875
		css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
	}

	var blob = new Blob([css], { type: "text/css" });

	var oldSrc = link.href;

	link.href = URL.createObjectURL(blob);

	if(oldSrc) URL.revokeObjectURL(oldSrc);
}


/***/ }),
/* 5 */
/***/ (function(module, exports) {


/**
 * When source maps are enabled, `style-loader` uses a link element with a data-uri to
 * embed the css on the page. This breaks all relative urls because now they are relative to a
 * bundle instead of the current page.
 *
 * One solution is to only use full urls, but that may be impossible.
 *
 * Instead, this function "fixes" the relative urls to be absolute according to the current page location.
 *
 * A rudimentary test suite is located at `test/fixUrls.js` and can be run via the `npm test` command.
 *
 */

module.exports = function (css) {
  // get current location
  var location = typeof window !== "undefined" && window.location;

  if (!location) {
    throw new Error("fixUrls requires window.location");
  }

	// blank or null?
	if (!css || typeof css !== "string") {
	  return css;
  }

  var baseUrl = location.protocol + "//" + location.host;
  var currentDir = baseUrl + location.pathname.replace(/\/[^\/]*$/, "/");

	// convert each url(...)
	/*
	This regular expression is just a way to recursively match brackets within
	a string.

	 /url\s*\(  = Match on the word "url" with any whitespace after it and then a parens
	   (  = Start a capturing group
	     (?:  = Start a non-capturing group
	         [^)(]  = Match anything that isn't a parentheses
	         |  = OR
	         \(  = Match a start parentheses
	             (?:  = Start another non-capturing groups
	                 [^)(]+  = Match anything that isn't a parentheses
	                 |  = OR
	                 \(  = Match a start parentheses
	                     [^)(]*  = Match anything that isn't a parentheses
	                 \)  = Match a end parentheses
	             )  = End Group
              *\) = Match anything and then a close parens
          )  = Close non-capturing group
          *  = Match anything
       )  = Close capturing group
	 \)  = Match a close parens

	 /gi  = Get all matches, not the first.  Be case insensitive.
	 */
	var fixedCss = css.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi, function(fullMatch, origUrl) {
		// strip quotes (if they exist)
		var unquotedOrigUrl = origUrl
			.trim()
			.replace(/^"(.*)"$/, function(o, $1){ return $1; })
			.replace(/^'(.*)'$/, function(o, $1){ return $1; });

		// already a full url? no change
		if (/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/)/i.test(unquotedOrigUrl)) {
		  return fullMatch;
		}

		// convert the url to a full url
		var newUrl;

		if (unquotedOrigUrl.indexOf("//") === 0) {
		  	//TODO: should we add protocol?
			newUrl = unquotedOrigUrl;
		} else if (unquotedOrigUrl.indexOf("/") === 0) {
			// path should be relative to the base url
			newUrl = baseUrl + unquotedOrigUrl; // already starts with '/'
		} else {
			// path should be relative to current directory
			newUrl = currentDir + unquotedOrigUrl.replace(/^\.\//, ""); // Strip leading './'
		}

		// send back the fixed url(...)
		return "url(" + JSON.stringify(newUrl) + ")";
	});

	// send back the fixed css
	return fixedCss;
};


/***/ }),
/* 6 */
/***/ (function(module, exports) {

var _$ = {};
_$.extend = function () {
	var extend, _extend, _isObject;
	_isObject = function (o) {
		return Object.prototype.toString.call(o) === '[object Object]';
	};
	_extend = function self(destination, source) {
		var property;
		for (property in destination) {
			if (destination.hasOwnProperty(property)) {
				// 若destination[property]和sourc[property]都是对象，则递归 
				if (_isObject(destination[property]) && _isObject(source[property])) {
					self(destination[property], source[property]);
				};
				// 若sourc[property]已存在，则跳过 
				if (source.hasOwnProperty(property)) {
					continue;
				} else {
					source[property] = destination[property];
				}
			}
		}
	};
	var arr = arguments,
	    result = {},
	    i;if (!arr.length) return {};
	for (i = arr.length - 1; i >= 0; i--) {
		if (_isObject(arr[i])) {
			_extend(arr[i], result);
		};
	}
	arr[0] = result;return result;
};

//加载图片
_$.loadImage = function (src, callback, progress) {
	var img,
	    counter = 0,
	    srcArr = src;
	if (typeof src === "string" && src != '') {
		srcArr = [];srcArr.push(src);
	};
	var len = srcArr.length;
	function check(s) {
		counter++;
		var pro = 100 / len * counter > 100 ? 100 : 100 / len * counter;
		progress && progress(pro);
		if (counter >= len) {
			callback(counter);
		};
	};

	for (var i = 0; i < srcArr.length; i++) {
		img = new Image(); //创建一个Image对象，实现图片的预下载
		(function (k) {
			img.src = typeof srcArr[k] === "string" ? srcArr[k] : srcArr[k].src;
			if (img.complete) {
				check(srcArr[k]);
			} else {
				img.onload = function () {
					check(srcArr[k]);
				};
			};
		})(i);
	}; //end for
};
_$.trim = function (str) {
	return str.replace(/(^\s*)|(\s*$)/g, '');
};
_$.isArray = function (array) {
	return Object.prototype.toString.call(array) == '[object Array]';
};
_$.inArray = function (current, array) {
	for (var i = 0; i < array.length; i++) {
		if (_$.isArray(current)) {
			var res = true;
			for (var k = 0; k < current.length; k++) {
				if (!_$.inArray(current[k], array)) {
					res = false;
				};
			};
			return res;
		} else {
			if (array[i] == current.replace(/(^\s*)|(\s*$)/g, '')) {
				return true;
			};
		};
	};
	return false;
};
_$.delArray = function (val, arr) {
	var index = arr.indexOf(val);
	if (index > -1) {
		arr.splice(index, 1);
	}
};

_$.getElement = function (selecter, parent) {
	if (!selecter) return false;
	parent = parent || document.body;
	if (selecter.indexOf('#') != -1) {
		return document.getElementById(selecter.replace('#', ''));
	};
	var res = [];
	if (_$.isArray(parent)) {
		for (var i = 0; i < parent.length; i++) {
			var _sub = _$.getElement(selecter, parent[i]);
			res = res.concat(_sub);
		}
	} else {
		var arr = parent.childNodes;
		for (var i = 0; i < arr.length; i++) {
			if (selecter.indexOf('.') != -1) {
				if (arr[i].className != undefined && _$.inArray(selecter.replace('.', ''), arr[i].className.split(' '))) {
					res.push(arr[i]);
				};
			} else if (selecter.indexOf('[') != -1) {
				if (arr[i].className != undefined && arr[i].getAttribute(selecter.replace(/\[|\]/g, ''))) {
					res.push(arr[i]);
				};
			} else {
				if (arr[i].tagName && selecter.toLowerCase() == arr[i].tagName.toLowerCase()) {
					res.push(arr[i]);
				};
			}
			if (arr[i].childNodes.length > 0) {
				var _sub = _$.getElement(selecter, arr[i]);
				res = res.concat(_sub);
			}
		};
	};
	return res.length == 1 ? res[0] : res;
};
_$.elem = function (html) {
	var a = document.createElement('div');
	a.innerHTML = html;
	return _$.children(a);
};

_$.children = function (parent, filter) {
	var res = [];
	if (_$.isArray(parent)) {
		for (var i = 0; i < parent.length; i++) {
			var _sub = _$.children(parent[i], filter);
			res = res.concat(_sub);
		}
	} else {
		var arr = parent.childNodes;
		for (var i = 0; i < arr.length; i++) {
			if (arr[i].className != undefined) {
				res.push(arr[i]);
			};
		};
	};
	return res.length == 1 ? res[0] : res;
};
_$.prev = function (element, classname) {
	if (!element) return false;
	var prev = element.previousSibling;
	if (prev && prev.className != undefined) {
		if (classname) {
			classname = classname.replace(/\./g, '');
			prev = _$.hasClass(classname, prev) ? prev : _$.prev(prev, classname);
		} else {
			prev = prev;
		}
	} else {
		prev = _$.prev(prev, classname);
	}
	return prev;
};
_$.next = function (element, classname) {
	if (!element) return false;
	var next = element.nextSibling;
	if (next && next.className != undefined) {
		if (classname) {
			classname = classname.replace(/\./g, '');
			next = _$.hasClass(classname, next) ? next : _$.next(next, classname);
		} else {
			next = next;
		}
	} else {
		next = _$.next(next, classname);
	}
	return next;
};
_$.formatClass = function (classname) {
	if (typeof classname === 'string') return classname.replace(/(^\s*)|(\s*$)/g, '').replace(/\s+/g, ' ');
};
_$.clone = function (element, flag) {
	var res = [];
	if (_$.isArray(element)) {
		for (var i = 0; i < element.length; i++) {
			res.push(element[i].cloneNode(flag));
		};
	} else {
		res = element.cloneNode(flag);
	}
	return res.length == 1 ? res[0] : res;
};
_$.prepend = function (newChild, parent) {
	if (parent.firstChild) {
		if (_$.isArray(newChild)) {
			for (var i = newChild.length - 1; i >= 0; i--) {
				parent.insertBefore(newChild[i], parent.firstChild);
			};
		} else {
			parent.insertBefore(newChild, parent.firstChild);
		};
	} else {
		if (_$.isArray(newChild)) {
			for (var i = 0; i < newChild.length; i++) {
				parent.appendChild(newChild[i]);
			};
		} else {
			parent.appendChild(newChild);
		};
	}
	return parent;
};
_$.append = function (newChild, parent) {
	if (_$.isArray(newChild)) {
		for (var i = 0; i < newChild.length; i++) {
			parent.appendChild(newChild[i]);
		};
	} else {
		parent.appendChild(newChild);
	};
	return parent;
};
_$.before = function (before, element) {
	if (!element) return false;
	if (_$.isArray(element)) {
		for (var i = 0; i < element.length; i++) {
			_$.before(before, element[i]);
		};
	} else {
		element.parentNode.insertBefore(before, element);
	};
};
_$.after = function (after, element) {
	if (!element) return false;
	if (_$.isArray(element)) {
		for (var i = 0; i < element.length; i++) {
			_$.after(after, element[i]);
		};
	} else {
		if (element.nextSibling) {
			element.parentNode.insertBefore(after, element.nextSibling);
		} else {
			element.parentNode.appendChild(after);
		};
	};
};
_$.remove = function (element) {
	if (!element) return false;
	if (_$.isArray(element)) {
		for (var i = 0; i < element.length; i++) {
			_$.remove(element[i]);
		};
	} else {
		element.parentNode.removeChild(element);
	};
};
_$.hasClass = function (classname, element) {
	var classnameArr = _$.formatClass(classname).split(' ');
	var elementClsArr;
	var elementClsArr = element.className ? _$.formatClass(element.className).split(' ') : [];
	return _$.inArray(classnameArr, elementClsArr);
};
_$.addClass = function (classname, element) {
	var classnameArr = _$.formatClass(classname).split(' ');
	if (_$.isArray(element)) {
		for (var i = 0; i < element.length; i++) {
			_$.addClass(classname, element[i]);
		};
	} else {
		var elementClsArr = element.className ? _$.formatClass(element.className).split(' ') : [];
		if (!_$.inArray(classnameArr, elementClsArr)) {
			element.className = elementClsArr.join(' ') + ' ' + classnameArr.join(' ');
		};
	}
};
_$.removeClass = function (classname, element) {
	var classnameArr = _$.formatClass(classname).split(' ');
	if (_$.isArray(element)) {
		for (var i = 0; i < element.length; i++) {
			_$.removeClass(classname, element[i]);
		};
	} else {
		var elementClsArr;
		if (element.className) {
			elementClsArr = _$.formatClass(element.className).split(' ');
			var newclass = [];
			for (var i = 0; i < elementClsArr.length; i++) {
				if (!_$.inArray(elementClsArr[i], classnameArr)) {
					newclass.push(elementClsArr[i]);
				};
			};
			element.className = newclass.join(' ');
		};
	}
};
_$.toggleClass = function (classname, element) {
	if (_$.hasClass(classname, element)) {
		_$.removeClass(classname, element);
	} else {
		_$.addClass(classname, element);
	}
};
_$.css = function (element, style) {
	if (_$.isArray(element)) {
		for (var i = 0; i < element.length; i++) {
			_$.css(element[i], style);
		};
	} else {
		for (var key in style) {
			element.style[key] = style[key];
		}
	}
};
_$.animate = function (element, option, speed, callback) {
	var direction = {};
	for (var key in option) {
		direction[key] = element[key] > option[key] ? -1 : 1;
	};
	function setStyle(t) {
		element.AnimFrame = requestAnimFrame(setStyle);
		for (var key in option) {
			if (element[key] * direction[key] >= option[key]) {
				cancelAnimationFrame(element.AnimFrame);
				callback && callback();
				break;
			} else {
				element[key] = element[key] + speed * direction[key];
			};
		};
	};
	setStyle();
};
_$.stop = function (element) {
	cancelAnimationFrame(element.AnimFrame);
};
_$.addEvent = function (element, ev, fn, param) {
	//element为要绑定事件的元素，ev为要绑定的事件，fn为绑定事件的函数
	var evs = _$.formatClass(ev).split(' ');
	if (evs.length > 1) {
		for (var i = 0; i < evs.length; i++) {
			_$.addEvent(element, evs[i], fn);
		}
	} else {
		var ekey = ev.split('.');
		var key = ekey.length > 1 ? ekey[1] : '#' + ev;
		element[key] = function () {
			fn(param);
		};
		if (element.attachEvent) {
			element.attachEvent("on" + ekey[0], element[key]);
		} else {
			element.addEventListener(ekey[0], element[key], false);
		}
	};
};
_$.removeEvent = function (element, ev) {
	var evs = _$.formatClass(ev).split(' ');
	if (evs.length > 1) {
		for (var i = 0; i < evs.length; i++) {
			_$.addEvent(element, evs[i]);
		}
	} else {
		var ekey = ev.split('.');
		var key = ekey.length > 1 ? ekey[1] : '#' + ev;
		if (element.attachEvent) {
			element.detachEvent("on" + ekey[0], element[key]);
		} else {
			element.removeEventListener(ekey[0], element[key], false);
		}
	};
};
_$.dragDisabled = function (element) {
	//禁止图片拖拽
	if (element.length > 1) {
		for (var i = 0; i < element.length; i++) {
			_$.addEvent(element[i], 'dragstart', function (e) {
				e.preventDefault();
			});
		}
	} else {
		_$.addEvent(element, 'dragstart', function () {
			e.preventDefault();
		});
	};
};
_$.formatJSON = function (str) {
	str = str.replace(/\s/g, '').replace(/\n/g, '').replace(/^\{(.*)\}$/, '\{"$1"\}');

	var temp = str.match(/:"(.*?)",|:"(.*?)"|:'(.*?)',|:'(.*?)'/g);
	str = str.replace(/:"(.*?)",|:"(.*?)"|:'(.*?)',|:'(.*?)'/g, '@@@@');
	for (i = 0; i < temp.length; i++) {
		var v = temp[i].replace(':', '#first#').replace(/,$/, '#last#').replace(/^'*|'*$/, '#single#').replace(/^"*|"*$/, '#double#').replace(/,/g, '#D#').replace(/:/g, '#M#').replace('#first#', ':').replace('#last#', ',').replace('#single#', "'").replace('#double#', '"');
		str = str.replace('@@@@', v);
	};
	str = str.replace('{""', '{"').replace('{"\'', '{"').replace('""}', '"}').replace('\'"}', '"}').replace(/:/g, '":"').replace(/'":/g, '":').replace(/"":/g, '":').replace(/:"'/g, ':"').replace(/:""/g, ':"').replace(/,/g, '","').replace(/'",/g, '",').replace(/"",/g, '",').replace(/,"'/g, ',"').replace(/,""/g, ',"').replace(/#D#/g, ',').replace(/#M#/g, ':').replace(/\\/g, '\\\\');
	return str;
};

module.exports = _$;

/***/ })
/******/ ]);